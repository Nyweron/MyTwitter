var app=angular.module("app",["ngRoute"]);angular.module("app").controller("ApplicationCtrl",["$scope","UserSvc",function(e,t){e.$on("login",function(t,n){e.currentUser=n}),e.$on("register",function(t,n){e.registerResponse=n}),e.disableRegisterResponse=function(){e.registerResponse=null},e.logout=function(){console.log("logout"),e.currentUser=null,t.logout()}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(e,t){e.login=function(n,o){t.login(n,o).then(function(t){e.$emit("login",t)})}}]),app.controller("PostsCtrl",["$scope","PostsSvc",function(e,t){e.addPost=function(){e.postBody&&t.create({username:"nyweron",body:e.postBody}).success(function(t){e.posts.unshift(t),e.postBody=null})},t.fetch().success(function(t){e.posts=t})}]),app.service("PostsSvc",["$http",function(e){this.fetch=function(){return e.get("/posts")},this.create=function(t){return e.post("/posts",t)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(e,t){e.register=function(n,o){e.nameRequired="",e.passwordRequired="",e.nameRequired=n?"":"Name Required",e.passwordRequired=o?"":"Password Required",n&&o&&t.register(n,o).then(function(t){e.$emit("register","Konto zarejestrowane poprawnie, zaloguj siÄ™."),e.username="",e.password=""})}}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}).when("/logout",{controller:"ApplicationCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(e){var t=this;t.getUser=function(){return e.get("/users").then(function(e){return e.data})},t.login=function(n,o){return e.post("/sessions",{username:n,password:o}).then(function(n){return t.token=n.data,e.defaults.headers.common["X-Auth"]=n.data,t.getUser()})},t.register=function(t,n){return e.post("/users",{username:t,password:n}).then(function(e){return e})},t.logout=function(){delete e.defaults.headers.common["X-Auth"]}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
