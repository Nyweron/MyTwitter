var app=angular.module("app",["ngRoute"]);angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(n,e){t.currentUser=e}),t.$on("register",function(n,e){t.registerResponse=e})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,n){t.login=function(e,o){n.login(e,o).then(function(n){t.$emit("login",n)})}}]),app.controller("PostsCtrl",["$scope","PostsSvc",function(t,n){t.addPost=function(){t.postBody&&n.create({username:"nyweron",body:t.postBody}).success(function(n){t.posts.unshift(n),t.postBody=null})},n.fetch().success(function(n){t.posts=n})}]),app.service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/posts")},this.create=function(n){return t.post("/posts",n)}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var n=this;n.getUser=function(){return t.get("/users").then(function(t){return t.data})},n.login=function(e,o){return t.post("/sessions",{username:e,password:o}).then(function(e){return n.token=e.data,t.defaults.headers.common["X-Auth"]=e.data,n.getUser()})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJvdXRlcy5qcyIsInVzZXIuc3ZjLmpzIl0sIm5hbWVzIjpbImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJG9uIiwiXyIsInVzZXIiLCJjdXJyZW50VXNlciIsInJlc3BvbnNlIiwicmVnaXN0ZXJSZXNwb25zZSIsIlVzZXJTdmMiLCJsb2dpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ0aGVuIiwiJGVtaXQiLCJQb3N0c1N2YyIsImFkZFBvc3QiLCJwb3N0Qm9keSIsImNyZWF0ZSIsImJvZHkiLCJzdWNjZXNzIiwicG9zdCIsInBvc3RzIiwidW5zaGlmdCIsImZldGNoIiwic2VydmljZSIsIiRodHRwIiwidGhpcyIsImdldCIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwic3ZjIiwiZ2V0VXNlciIsImRhdGEiLCJ0b2tlbiIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbW1vbiJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQUEsSUFBQUMsUUFBQUMsT0FBQSxPQUNBLFlDREFELFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxtQkFBQSxTQUFBLFNBQUFDLEdBQ0FBLEVBQUFDLElBQUEsUUFBQSxTQUFBQyxFQUFBQyxHQUNBSCxFQUFBSSxZQUFBRCxJQUVBSCxFQUFBQyxJQUFBLFdBQUEsU0FBQUMsRUFBQUcsR0FDQUwsRUFBQU0saUJBQUFELE9DTkFSLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxhQUFBLFNBQUEsVUFBQSxTQUFBQyxFQUFBTyxHQUNBUCxFQUFBUSxNQUFBLFNBQUFDLEVBQUFDLEdBQ0FILEVBQUFDLE1BQUFDLEVBQUFDLEdBQ0FDLEtBQUEsU0FBQVIsR0FDQUgsRUFBQVksTUFBQSxRQUFBVCxTQ0xBUCxJQUFBRyxXQUFBLGFBQUEsU0FBQSxXQUFBLFNBQUFDLEVBQUFhLEdBQ0FiLEVBQUFjLFFBQUEsV0FDQWQsRUFBQWUsVUFDQUYsRUFBQUcsUUFDQVAsU0FBQSxVQUNBUSxLQUFBakIsRUFBQWUsV0FDQUcsUUFBQSxTQUFBQyxHQUNBbkIsRUFBQW9CLE1BQUFDLFFBQUFGLEdBQ0FuQixFQUFBZSxTQUFBLFFBS0FGLEVBQUFTLFFBQUFKLFFBQUEsU0FBQUUsR0FDQXBCLEVBQUFvQixNQUFBQSxPQ2RBeEIsSUFBQTJCLFFBQUEsWUFBQSxRQUFBLFNBQUFDLEdBRUFDLEtBQUFILE1BQUEsV0FDQSxPQUFBRSxFQUFBRSxJQUFBLFdBRUFELEtBQUFULE9BQUEsU0FBQUcsR0FDQSxPQUFBSyxFQUFBTCxLQUFBLFNBQUFBLE9DTkF0QixRQUFBQyxPQUFBLE9BQ0E2QixRQUFBLGlCQUFBLFNBQUFDLEdBQ0FBLEVBQ0FDLEtBQUEsS0FBQTlCLFdBQUEsWUFBQStCLFlBQUEsZUFDQUQsS0FBQSxhQUFBOUIsV0FBQSxlQUFBK0IsWUFBQSxrQkFDQUQsS0FBQSxVQUFBOUIsV0FBQSxZQUFBK0IsWUFBQSxrQkNMQWpDLFFBQUFDLE9BQUEsT0FDQXlCLFFBQUEsV0FBQSxRQUFBLFNBQUFDLEdBQ0EsSUFBQU8sRUFBQU4sS0FDQU0sRUFBQUMsUUFBQSxXQUNBLE9BQUFSLEVBQUFFLElBQUEsVUFDQWYsS0FBQSxTQUFBTixHQUNBLE9BQUFBLEVBQUE0QixRQUdBRixFQUFBdkIsTUFBQSxTQUFBQyxFQUFBQyxHQUNBLE9BQUFjLEVBQUFMLEtBQUEsYUFDQVYsU0FBQUEsRUFDQUMsU0FBQUEsSUFDQUMsS0FBQSxTQUFBTixHQUdBLE9BRkEwQixFQUFBRyxNQUFBN0IsRUFBQTRCLEtBQ0FULEVBQUFXLFNBQUFDLFFBQUFDLE9BQUEsVUFBQWhDLEVBQUE0QixLQUNBRixFQUFBQyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcclxuICAgICduZ1JvdXRlJ1xyXG5dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0FwcGxpY2F0aW9uQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSkge1xyXG4gICAgICAgICRzY29wZS4kb24oJ2xvZ2luJywgZnVuY3Rpb24oXywgdXNlcikge1xyXG4gICAgICAgICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyXHJcbiAgICAgICAgfSlcclxuICAgICAgICAkc2NvcGUuJG9uKCdyZWdpc3RlcicsIGZ1bmN0aW9uKF8sIHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5yZWdpc3RlclJlc3BvbnNlID0gcmVzcG9uc2VcclxuICAgICAgICB9KVxyXG4gICAgfSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUsIFVzZXJTdmMpIHtcclxuICAgICAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcclxuICAgICAgICAgICAgVXNlclN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbih1c2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdsb2dpbicsIHVzZXIpXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH0pIiwiYXBwLmNvbnRyb2xsZXIoJ1Bvc3RzQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgUG9zdHNTdmMpIHtcclxuICAgICRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCRzY29wZS5wb3N0Qm9keSkge1xyXG4gICAgICAgICAgICBQb3N0c1N2Yy5jcmVhdGUoe1xyXG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6ICdueXdlcm9uJyxcclxuICAgICAgICAgICAgICAgIGJvZHk6ICRzY29wZS5wb3N0Qm9keVxyXG4gICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uKHBvc3QpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3QpXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdEJvZHkgPSBudWxsXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIFBvc3RzU3ZjLmZldGNoKCkuc3VjY2VzcyhmdW5jdGlvbihwb3N0cykge1xyXG4gICAgICAgICRzY29wZS5wb3N0cyA9IHBvc3RzXHJcbiAgICB9KVxyXG59KSIsImFwcC5zZXJ2aWNlKCdQb3N0c1N2YycsIFsnJGh0dHAnLCBmdW5jdGlvbigkaHR0cCkge1xyXG5cclxuICAgIHRoaXMuZmV0Y2ggPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvcG9zdHMnKVxyXG4gICAgfVxyXG4gICAgdGhpcy5jcmVhdGUgPSBmdW5jdGlvbihwb3N0KSB7XHJcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9wb3N0cycsIHBvc3QpXHJcbiAgICB9XHJcbn1dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbmZpZyhmdW5jdGlvbigkcm91dGVQcm92aWRlcikge1xyXG4gICAgICAgICRyb3V0ZVByb3ZpZGVyXHJcbiAgICAgICAgICAgIC53aGVuKCcvJywgeyBjb250cm9sbGVyOiAnUG9zdHNDdHJsJywgdGVtcGxhdGVVcmw6ICdwb3N0cy5odG1sJyB9KVxyXG4gICAgICAgICAgICAud2hlbignL3JlZ2lzdGVyJywgeyBjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJywgdGVtcGxhdGVVcmw6ICdyZWdpc3Rlci5odG1sJyB9KVxyXG4gICAgICAgICAgICAud2hlbignL2xvZ2luJywgeyBjb250cm9sbGVyOiAnTG9naW5DdHJsJywgdGVtcGxhdGVVcmw6ICdsb2dpbi5odG1sJyB9KVxyXG4gICAgfSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAgIC5zZXJ2aWNlKCdVc2VyU3ZjJywgZnVuY3Rpb24oJGh0dHApIHtcclxuICAgICAgICB2YXIgc3ZjID0gdGhpc1xyXG4gICAgICAgIHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy91c2VycycpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBzdmMubG9naW4gPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9zZXNzaW9ucycsIHtcclxuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcclxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZFxyXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICBzdmMudG9rZW4gPSByZXNwb25zZS5kYXRhXHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSByZXNwb25zZS5kYXRhXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ZjLmdldFVzZXIoKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH0pIl19
