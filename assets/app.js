var app=angular.module("app",["ngRoute"]);angular.module("app").controller("ApplicationCtrl",["$scope","UserSvc","$location",function(t,o,e){t.$on("login",function(o,e){t.currentUser=e}),t.$on("register",function(o,e){t.registerResponse=e}),t.disableRegisterResponse=function(){t.registerResponse=null},t.logout=function(){console.log("logout"),t.currentUser=null,o.logout(),e.path("/")}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location",function(t,o,e){t.login=function(n,r){o.login(n,r).then(function(o){t.$emit("login",o),e.path("/")})}}]),app.controller("PostsCtrl",["$scope","PostsSvc",function(t,o){t.addPost=function(){t.postBody&&o.create({username:"nyweron",body:t.postBody}).success(function(o){t.postBody=null})},t.$on("ws:new_post",function(o,e){t.$apply(function(){t.posts.unshift(e)})}),o.fetch().success(function(o){t.posts=o})}]),app.service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/posts")},this.create=function(o){return t.post("/posts",o)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,o){t.register=function(e,n){t.nameRequired="",t.passwordRequired="",t.nameRequired=e?"":"Name Required",t.passwordRequired=n?"":"Password Required",e&&n&&o.register(e,n).then(function(o){t.$emit("register","Konto zarejestrowane poprawnie, zaloguj siÄ™."),t.username="",t.password=""})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}).when("/logout",{controller:"ApplicationCtrl",templateUrl:"posts.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var o=this;o.getUser=function(){return t.get("/users").then(function(t){return t.data})},o.login=function(e,n){return t.post("/sessions",{username:e,password:n}).then(function(e){return o.token=e.data,t.defaults.headers.common["X-Auth"]=e.data,o.getUser()})},o.register=function(o,e){return t.post("/users",{username:o,password:e}).then(function(t){return t})},o.logout=function(){delete t.defaults.headers.common["X-Auth"]}}]),angular.module("app").service("WebSocketSvc",["$rootScope",function(t){function o(){return"https:"===window.location.protocol?"wss://"+window.location.host:"ws://"+window.location.host}var e;this.connect=function(){(e=new WebSocket(o())).onopen=function(){console.log("WebSocket connected")},e.onmessage=function(o){var e=JSON.parse(o.data);t.$broadcast("ws:"+e.topic,e.data)}},this.send=function(t,o){var n=JSON.stringify({topic:t,data:o});e.send(n)}}]).run(["WebSocketSvc",function(t){t.connect()}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
