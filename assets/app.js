var app=angular.module("app",["ngRoute"]);angular.module("app").controller("ApplicationCtrl",["$scope","UserSvc","$location",function(e,o,t){e.$on("login",function(o,t){e.currentUser=t}),e.$on("register",function(o,t){e.registerResponse=t}),e.disableRegisterResponse=function(){e.registerResponse=null},e.logout=function(){console.log("logout"),e.currentUser=null,o.logout(),t.path("/")};var n=o.getToken();console.log("getToken",n);var r=o.isSessionActive();console.log("isSessionActiovate",r);var s=o.setXAuth();console.log("xauth:"+s),r&&(console.log("Te"),console.log("XXX:",o.getUser()),o.getUser().then(function(o){e.currentUser=o}))}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location",function(e,o,t){e.login=function(n,r){o.login(n,r).then(function(o){e.$emit("login",o),t.path("/")})}}]),app.controller("PostsCtrl",["$scope","PostsSvc",function(e,o){e.addPost=function(){e.postBody&&o.create({username:"nyweron",body:e.postBody}).success(function(o){e.postBody=null})},e.$on("ws:new_post",function(o,t){e.$apply(function(){e.posts.unshift(t)})}),o.fetch().success(function(o){e.posts=o})}]),app.service("PostsSvc",["$http",function(e){this.fetch=function(){return e.get("/posts")},this.create=function(o){return e.post("/posts",o)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(e,o){e.register=function(t,n){e.nameRequired="",e.passwordRequired="",e.nameRequired=t?"":"Name Required",e.passwordRequired=n?"":"Password Required",t&&n&&o.register(t,n).then(function(o){e.$emit("register","Konto zarejestrowane poprawnie, zaloguj siÄ™."),e.username="",e.password=""})}}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}).when("/logout",{controller:"ApplicationCtrl",templateUrl:"posts.html"})}]),angular.module("app").service("UserSvc",["$http","$window",function(e,o){var t=this;t.getUser=function(){return e.get("/users").then(function(e){return e.data})},t.login=function(o,n){return e.post("/sessions",{username:o,password:n}).then(function(o){return t.token=o.data,t.setToken(t.token),e.defaults.headers.common["X-Auth"]=o.data,t.getUser()})},t.register=function(o,t){return e.post("/users",{username:o,password:t}).then(function(e){return e})},t.logout=function(){o.localStorage.clear(),delete e.defaults.headers.common["X-Auth"]},t.setToken=function(e){return o.localStorage.token=e},t.getToken=function(){return o.localStorage.token},t.isSessionActive=function(){return!!o.localStorage.token},t.setXAuth=function(){return e.defaults.headers.common["X-Auth"]=t.getToken()}}]),angular.module("app").service("WebSocketSvc",["$rootScope",function(e){function o(){return"https:"===window.location.protocol?"wss://"+window.location.host:"ws://"+window.location.host}var t;this.connect=function(){(t=new WebSocket(o())).onopen=function(){console.log("WebSocket connected")},t.onmessage=function(o){var t=JSON.parse(o.data);e.$broadcast("ws:"+t.topic,t.data)}},this.send=function(e,o){var n=JSON.stringify({topic:e,data:o});t.send(n)}}]).run(["WebSocketSvc",function(e){e.connect()}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
